/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import readline from 'node:readline';
import type { Prompt } from '@inquirer/type';
import MuteStream from 'mute-stream';
export { usePrefix } from './lib/prefix.js';
export * from './lib/key.js';
export * from './lib/Paginator.js';
export declare type InquirerReadline = readline.ReadLine & {
    output: MuteStream;
    input: NodeJS.ReadableStream;
};
export declare type KeypressEvent = {
    name: string;
    ctrl: boolean;
};
export declare function useState<Value>(defaultValue: Value): [Value, (newValue: Value) => void];
export declare function useEffect(cb: () => void | (() => void), depArray: unknown[]): void;
export declare function useKeypress(userHandler: (event: KeypressEvent, rl: InquirerReadline) => void): void;
export declare function useRef<Value>(val: Value): {
    current: Value;
};
export declare type AsyncPromptConfig = {
    message: string | Promise<string> | (() => Promise<string>);
    validate?: (value: string) => boolean | string | Promise<string | boolean>;
};
export declare type ResolvedPromptConfig = {
    message: string;
    validate: (value: string) => boolean | string | Promise<string | boolean>;
};
export declare function createPrompt<Value, Config extends AsyncPromptConfig>(view: (config: Config & ResolvedPromptConfig, done: (value: Value) => void) => string | [string, string | undefined]): Prompt<Value, Config>;
